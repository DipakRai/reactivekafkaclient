(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@ngxs/store'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@ngxs/devtools-plugin', ['exports', '@angular/core', '@ngxs/store', 'rxjs/operators'], factory) :
    (global = global || self, factory((global.ngxs = global.ngxs || {}, global.ngxs['devtools-plugin'] = {}), global.ng.core, global['ngxs-store'], global.rxjs.operators));
}(this, function (exports, core, store, operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var NGXS_DEVTOOLS_OPTIONS = new core.InjectionToken('NGXS_DEVTOOLS_OPTIONS');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Adds support for the Redux Devtools extension:
     * http://extension.remotedev.io/
     */
    var NgxsReduxDevtoolsPlugin = /** @class */ (function () {
        function NgxsReduxDevtoolsPlugin(_options, _injector) {
            var _this = this;
            this._options = _options;
            this._injector = _injector;
            this.devtoolsExtension = null;
            this.windowObj = typeof window !== 'undefined' ? window : {};
            /** @type {?} */
            var globalDevtools = this.windowObj['__REDUX_DEVTOOLS_EXTENSION__'] || this.windowObj['devToolsExtension'];
            if (globalDevtools) {
                this.devtoolsExtension = (/** @type {?} */ (globalDevtools.connect(_options)));
                this.devtoolsExtension.subscribe((/**
                 * @param {?} a
                 * @return {?}
                 */
                function (a) { return _this.dispatched(a); }));
            }
        }
        Object.defineProperty(NgxsReduxDevtoolsPlugin.prototype, "store", {
            /**
             * Lazy get the store for circular dependency issues
             */
            get: /**
             * Lazy get the store for circular dependency issues
             * @private
             * @return {?}
             */
            function () {
                return this._injector.get(store.Store);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Middleware handle function
         */
        /**
         * Middleware handle function
         * @param {?} state
         * @param {?} action
         * @param {?} next
         * @return {?}
         */
        NgxsReduxDevtoolsPlugin.prototype.handle = /**
         * Middleware handle function
         * @param {?} state
         * @param {?} action
         * @param {?} next
         * @return {?}
         */
        function (state, action, next) {
            var _this = this;
            /** @type {?} */
            var isDisabled = this._options && this._options.disabled;
            if (!this.devtoolsExtension || isDisabled) {
                return next(state, action);
            }
            return next(state, action).pipe(operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                /** @type {?} */
                var newState = _this.store.snapshot();
                _this.sendToDevTools(state, action, newState);
                throw error;
            })), operators.tap((/**
             * @param {?} newState
             * @return {?}
             */
            function (newState) {
                _this.sendToDevTools(state, action, newState);
            })));
        };
        /**
         * @private
         * @param {?} state
         * @param {?} action
         * @param {?} newState
         * @return {?}
         */
        NgxsReduxDevtoolsPlugin.prototype.sendToDevTools = /**
         * @private
         * @param {?} state
         * @param {?} action
         * @param {?} newState
         * @return {?}
         */
        function (state, action, newState) {
            /** @type {?} */
            var type = store.getActionTypeFromInstance(action);
            // if init action, send initial state to dev tools
            /** @type {?} */
            var isInitAction = type === '@@INIT';
            if (isInitAction) {
                (/** @type {?} */ (this.devtoolsExtension)).init(state);
            }
            else {
                (/** @type {?} */ (this.devtoolsExtension)).send(__assign({}, action, { type: type }), newState);
            }
        };
        /**
         * Handle the action from the dev tools subscription
         */
        /**
         * Handle the action from the dev tools subscription
         * @param {?} action
         * @return {?}
         */
        NgxsReduxDevtoolsPlugin.prototype.dispatched = /**
         * Handle the action from the dev tools subscription
         * @param {?} action
         * @return {?}
         */
        function (action) {
            var _this = this;
            if (action.type === 'DISPATCH') {
                if (action.payload.type === 'JUMP_TO_ACTION' ||
                    action.payload.type === 'JUMP_TO_STATE') {
                    /** @type {?} */
                    var prevState = JSON.parse(action.state);
                    this.store.reset(prevState);
                }
                else if (action.payload.type === 'TOGGLE_ACTION') {
                    console.warn('Skip is not supported at this time.');
                }
                else if (action.payload.type === 'IMPORT_STATE') {
                    var _a = action.payload.nextLiftedState, actionsById_1 = _a.actionsById, computedStates_1 = _a.computedStates, currentStateIndex = _a.currentStateIndex;
                    (/** @type {?} */ (this.devtoolsExtension)).init(computedStates_1[0].state);
                    Object.keys(actionsById_1)
                        .filter((/**
                     * @param {?} actionId
                     * @return {?}
                     */
                    function (actionId) { return actionId !== '0'; }))
                        .forEach((/**
                     * @param {?} actionId
                     * @return {?}
                     */
                    function (actionId) {
                        return (/** @type {?} */ (_this.devtoolsExtension)).send(actionsById_1[actionId], computedStates_1[actionId].state);
                    }));
                    this.store.reset(computedStates_1[currentStateIndex].state);
                }
            }
            else if (action.type === 'ACTION') {
                /** @type {?} */
                var actionPayload = JSON.parse(action.payload);
                this.store.dispatch(actionPayload);
            }
        };
        NgxsReduxDevtoolsPlugin.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        NgxsReduxDevtoolsPlugin.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [NGXS_DEVTOOLS_OPTIONS,] }] },
            { type: core.Injector }
        ]; };
        return NgxsReduxDevtoolsPlugin;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} options
     * @return {?}
     */
    function devtoolsOptionsFactory(options) {
        return __assign({ name: 'NGXS' }, options);
    }
    /** @type {?} */
    var USER_OPTIONS = new core.InjectionToken('USER_OPTIONS');
    var NgxsReduxDevtoolsPluginModule = /** @class */ (function () {
        function NgxsReduxDevtoolsPluginModule() {
        }
        /**
         * @param {?=} options
         * @return {?}
         */
        NgxsReduxDevtoolsPluginModule.forRoot = /**
         * @param {?=} options
         * @return {?}
         */
        function (options) {
            return {
                ngModule: NgxsReduxDevtoolsPluginModule,
                providers: [
                    {
                        provide: store.NGXS_PLUGINS,
                        useClass: NgxsReduxDevtoolsPlugin,
                        multi: true
                    },
                    {
                        provide: USER_OPTIONS,
                        useValue: options
                    },
                    {
                        provide: NGXS_DEVTOOLS_OPTIONS,
                        useFactory: devtoolsOptionsFactory,
                        deps: [USER_OPTIONS]
                    }
                ]
            };
        };
        NgxsReduxDevtoolsPluginModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [store.NgxsModule]
                    },] }
        ];
        return NgxsReduxDevtoolsPluginModule;
    }());

    exports.NGXS_DEVTOOLS_OPTIONS = NGXS_DEVTOOLS_OPTIONS;
    exports.NgxsReduxDevtoolsPlugin = NgxsReduxDevtoolsPlugin;
    exports.NgxsReduxDevtoolsPluginModule = NgxsReduxDevtoolsPluginModule;
    exports.ɵa = devtoolsOptionsFactory;
    exports.ɵb = USER_OPTIONS;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngxs-devtools-plugin.umd.js.map
